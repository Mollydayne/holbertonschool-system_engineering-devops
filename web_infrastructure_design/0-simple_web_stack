# 0. Simple Web Stack

Let’s imagine you're just opening your very first digital bakery. You don't have a whole team or a fancy open kitchen yet : it's just you, one oven, and a place to serve from. That’s what this single-server setup is.

---

                           +---------------------------+
                           |         Internet          |
                           +-------------+-------------+
                                         |
                        1. DNS Lookup    | 2. HTTP Request
                                         v
                             +--------------------+
                             |     DNS Server     |
                             | www.foobar.com --> |
                             |       8.8.8.8      |
                             +--------------------+
                                         |
                                 3. Connect to
                                         v
                           +---------------------------+
                           |     Single Server (IP)    |
                           |          8.8.8.8          |
                           +---------------------------+
                           |                           |
                           |  +---------------------+  |
                           |  |   Web Server        |  | ← Nginx
                           |  |  (Receives HTTP)    |  |
                           |  +---------------------+  |
                           |             |             |
                           |             v             |
                           |  +---------------------+  |
                           |  | Application Server  |  | ← Flask, PHP...
                           |  |  (Runs the logic)   |  |
                           |  +---------------------+  |
                           |             |             |
                           |             v             |
                           |  +---------------------+  |
                           |  | Application Files   |  | ← Your codebase
                           |  +---------------------+  |
                           |             |             |
                           |             v             |
                           |  +---------------------+  |
                           |  |   MySQL Database    |  | ← Stores data
                           |  +---------------------+  |
                           +---------------------------+



## The Setup

This basic web infrastructure includes:

- A domain name: **www.foobar.com**
- A DNS record that points to a **single IP address** (`8.8.8.8`)
- One physical server (or VM) hosting everything, it can
- be in a datacenter or not and has an operating system:
  - A **web server** (Nginx)
  - An **application server**
  - Your **application files** (code base)
  - A **MySQL database**

All of that lives under the same roof.

---

## Role-by-role Breakdown

### What is a server?

A **server** is just a computer designed to respond to other computers. It’s like a chef that never sleeps, always ready to take orders.

In this case, your server is both the chef, the waiter, the kitchen, and the cash register.

---

### What is the role of the domain name?

Imagine your bakery is amazing, but it's located at GPS coordinates. No one wants to remember `8.8.8.8`.
Instead, people remember your catchy name: **foobar.com**.
The **domain name** is a friendly alias for your IP address.

---

### What type of DNS record is `www` in `www.foobar.com`?

That’s an **A record** : it maps a hostname to an IP address.

So when someone looks up `www.foobar.com`, the DNS server replies:
> "Ah yes, that’s 8.8.8.8 : go talk to that server."

---

### What is the role of the web server?

The **web server** (like Nginx) is your front counter. It handles all incoming orders (HTTP requests), and either serves static content (like pastries already wrapped), or passes the order to the kitchen.

---

### What is the role of the application server?

That’s your kitchen. It’s where the dynamic dishes are prepared — maybe logging someone in, processing an order, or calculating a total.

This is where **logic** happens.

---

### What is the role of the database?

The **MySQL database** is your recipe book and accounting system.
It stores:
- What products exist,
- What orders have been made,
- Who your customers are.

You can read from it or update it, but without it, you’d be lost.

---

### What is the server using to communicate with the user’s machine?

All communication happens over **HTTP (or HTTPS)** : which uses the **TCP/IP protocol stack** under the hood.

It’s like the set of kitchen rules that ensure the order comes in, the dish is served, and everything returns to the customer in a format they understand.

---

##  Weaknesses of this Setup

This single-server infrastructure is simple and cozy, but it comes with serious downsides:

### 1. SPOF — Single Point of Failure

If your one server goes down, the whole bakery closes.
No service, no website, no logs, no access.

### 2. Maintenance means downtime

Every time you want to update the app, deploy a fix, or restart something…
You must shut down your only machine — and therefore, shut down the whole service.

### 3. No scalability

If suddenly everyone wants your bread (high traffic), this little shop can't serve them all.
You’ll hit the limits of memory, CPU, bandwidth… and then crash.

---

## Conclusion

This setup is perfect to get started — like a food truck before opening your restaurant.
It helps you understand every moving part, and you can build upon it piece by piece as you grow.

